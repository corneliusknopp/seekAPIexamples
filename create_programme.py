# -*- coding: utf-8 -*-
"""create_programme.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aC9hI89aUeWvkZdYGMbUUATjPfV0A-fT

Import the libraries so that they can be used within the notebook

* **requests** is used to make HTTP calls
* **json** is used to encode and decode strings into JSON
* **string** is used to perform text manipulation and checking
* **getpass** is used to do non-echoing password input
"""

import requests
import json
import string
import getpass

"""The **base_url** holds the URL to the SEEK instance that will be used in the notebook

**headers** holds the HTTP headers that will be sent with every HTTP call

* **Content-type: application/vnd.api+json** - indicates that any data sent will be in JSON API format
* **Accept: application/vnd.api+json** - indicates that the notebook expects any data returned to be in JSON API format
* **Accept-Charset: ISO-8859-1** - indicates that the notebook expects any text returned to be in ISO-8859-1 character set
"""

base_url = 'https://testing.sysmo-db.org'

headers = {"Content-type": "application/vnd.api+json",
           "Accept": "application/vnd.api+json",
           "Accept-Charset": "ISO-8859-1"}

"""Create a **requests** HTTP **Session**. A **Session** has re-usable settings such as **headers**

The **authorization** is username and password. The user is prompted for this information.
"""

session = requests.Session()
session.headers.update(headers)
session.auth = (input('Username: '), getpass.getpass('Password: '))

"""Initialize a **programme** as a hierarchical directory

The title of the **programme** is input by the user
"""

programme = {}
programme['data'] = {}
programme['data']['type'] = 'programmes'
programme['data']['attributes'] = {}
programme['data']['attributes']['title'] = input('Please enter the name for the programme: ')

"""**POST** the **programme** to the SEEK instance.

Check the status of the response
"""

r = session.post(base_url + '/programmes', json=programme)
r.raise_for_status()

"""Extract the created **programme** from JSON into **populated**"""

populated = r.json()

"""Extract the URL to the newly created **programme**"""

programme_url = populated['data']['links']['self']

"""Print the **programme**'s URL"""

print (programme_url)

"""Tidy up the SEEK by deleting the **programme**"""

r = session.delete(base_url + programme_url)
r.raise_for_status()

"""Close the HTTP **session**"""

session.close()

